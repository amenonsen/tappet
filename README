tappet
------

***WARNING***

The cryptography code is still not complete. Everything about encryption
in the rest of this document is untrue.

***WARNING***

This program attaches to a pre-configured TAP interface and establishes
an encrypted UDP tunnel between itself and another copy of the program
running on another host. Each instance must have its own secret key and
the public key of the other side; and both sides must be given the same
address and port (one side asks, the other accepts).

No attempt is made to obscure the size and timing of packets being sent
over the wire. Ethernet frames are encrypted as they are received, and
immediately forwarded to the other side. Encryption is deterministic,
with a shared secret derived from one side's secret key and the other
side's public key. There is no renegotiation of keys. In fact, there
is no negotiation at all.

See http://cr.yp.to/highspeed/naclcrypto-20090310.pdf for details about
the encryption. This program includes a copy of TweetNaCl, which is in
the public domain.

Â» Usage

First, configure TAP interfaces on both hosts as root:

    # ip tuntap add tappet0 mode tap user tappet
    # : any other network/bridge configuration :

Generate keypairs on both hosts with tappet-keygen:

    $ ./tappet-keygen A

This will put the secret key into A.key and the public key into A.pub.
Run the equivalent command on B, then copy A.pub to B, and B.pub to A.

Then on the "server" host A, with address 192.0.2.34:

    $ tappet tappet0 ~/A.key ~/B.pub 192.0.2.34 1011 -l

Finally, on the "client" host B:

    $ tappet tappet0 ~/B.key ~/A.pub 192.0.2.34 1011

All of these parameters are mandatory. Once started, the program runs
forever, and exchanges packets between the TAP fd and the UDP socket,
encrypting in one direction and decrypting in the other.

This code is MIT licensed. Use at your own risk.

--
Abhijit Menon-Sen <ams@toroid.org>
2014-09-20
