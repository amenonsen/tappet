tappet
------

This program attaches to a pre-configured TAP interface and establishes
an encrypted UDP tunnel between itself and another copy of the program
running on another host. Each instance must have its own secret key and
the public key of the other side; and both sides must be given the same
address and port (one side asks, the other accepts).

***WARNING***

This code has not been audited. Everything about encryption and
security in this document may be untrue. Read the code and draw
your own conclusions.

***WARNING***

No attempt is made to obscure the size and timing of packets being sent
over the wire. Ethernet frames are encrypted as they are received, and
immediately forwarded to the other side. Encryption is deterministic,
with a shared secret derived from one side's secret key and the other
side's public key. There is no renegotiation of keys. In fact, there
is no negotiation at all.

See http://cr.yp.to/highspeed/naclcrypto-20090310.pdf for details about
the encryption. This program includes a copy of TweetNaCl, which is in
the public domain.

The encryption adds a constant 56 bytes of overhead to every ethernet
frame, which are themselves about 18 bytes larger than their payload.
The MTU of both TAP interfaces should therefore be set to at least 74
bytes less than the PMTU between the two ends of the tunnel. If there
are MTU problems, packets will mysteriously disappear. There is often
no good way to find the right MTU other than by experimentation.

Â» Usage

First, configure TAP interfaces on both hosts. You can create TAP
interfaces as root with a recent version of ip(8) or with tunctl(8):

    ip tuntap add tappet0 mode tap user someuser

    OR: tunctl -u someuser -t tappet0

Replace "someuser" with the name of an unprivileged user that will be
running tappet. Next, configure the interfaces: at a minimum, assign
IP addresses in the same subnet to each interface and bring them up.

Next, generate keypairs on both hosts with tappet-keygen:

    $ ./tappet-keygen A

This will put the secret key into A.key and the public key into A.pub.
Run the equivalent command on B, then copy A.pub to B, and B.pub to A.
These files can be transmitted in the clear.

Then on the server host A, with fixed address 192.0.2.34, run:

    $ tappet tappet0 ~/A.key ~/B.pub 192.0.2.34 1011 -l

Finally, on the client host B:

    $ tappet tappet0 ~/B.key ~/A.pub 192.0.2.34 1011

All of these parameters are mandatory. Once started, the program runs
forever, and exchanges packets between the TAP fd and the UDP socket,
encrypting in one direction and decrypting in the other.

This code is MIT licensed. Use at your own risk.

--
Abhijit Menon-Sen <ams@toroid.org>
2014-09-20
